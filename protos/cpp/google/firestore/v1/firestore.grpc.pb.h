/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/firestore/v1/firestore.proto
// Original file comments:
// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_google_2ffirestore_2fv1_2ffirestore_2eproto__INCLUDED
#define GRPC_google_2ffirestore_2fv1_2ffirestore_2eproto__INCLUDED

#include "google/firestore/v1/firestore.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace google {
namespace firestore {
namespace v1 {

// The Cloud Firestore service.
//
// This service exposes several types of comparable timestamps:
//
// *    `create_time` - The time at which a document was created. Changes only
//      when a document is deleted, then re-created. Increases in a strict
//       monotonic fashion.
// *    `update_time` - The time at which a document was last updated. Changes
//      every time a document is modified. Does not change when a write results
//      in no modifications. Increases in a strict monotonic fashion.
// *    `read_time` - The time at which a particular state was observed. Used
//      to denote a consistent snapshot of the database or the time at which a
//      Document was observed to not exist.
// *    `commit_time` - The time at which the writes in a transaction were
//      committed. Any read with an equal or greater `read_time` is guaranteed
//      to see the effects of the transaction.
class Firestore final {
 public:
  static constexpr char const* service_full_name() {
    return "google.firestore.v1.Firestore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Gets a single document.
    virtual ::grpc::Status GetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::google::firestore::v1::Document* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>> AsyncGetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>>(AsyncGetDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>> PrepareAsyncGetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>>(PrepareAsyncGetDocumentRaw(context, request, cq));
    }
    // Lists documents.
    virtual ::grpc::Status ListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::google::firestore::v1::ListDocumentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListDocumentsResponse>> AsyncListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListDocumentsResponse>>(AsyncListDocumentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListDocumentsResponse>> PrepareAsyncListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListDocumentsResponse>>(PrepareAsyncListDocumentsRaw(context, request, cq));
    }
    // Creates a new document.
    virtual ::grpc::Status CreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::google::firestore::v1::Document* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>> AsyncCreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>>(AsyncCreateDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>> PrepareAsyncCreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>>(PrepareAsyncCreateDocumentRaw(context, request, cq));
    }
    // Updates or inserts a document.
    virtual ::grpc::Status UpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::google::firestore::v1::Document* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>> AsyncUpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>>(AsyncUpdateDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>> PrepareAsyncUpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>>(PrepareAsyncUpdateDocumentRaw(context, request, cq));
    }
    // Deletes a document.
    virtual ::grpc::Status DeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteDocumentRaw(context, request, cq));
    }
    // Gets multiple documents.
    //
    // Documents returned by this method are not guaranteed to be returned in the
    // same order that they were requested.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>> BatchGetDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>>(BatchGetDocumentsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>> AsyncBatchGetDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>>(AsyncBatchGetDocumentsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>> PrepareAsyncBatchGetDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>>(PrepareAsyncBatchGetDocumentsRaw(context, request, cq));
    }
    // Starts a new transaction.
    virtual ::grpc::Status BeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::google::firestore::v1::BeginTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::BeginTransactionResponse>> AsyncBeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::BeginTransactionResponse>>(AsyncBeginTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::BeginTransactionResponse>> PrepareAsyncBeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::BeginTransactionResponse>>(PrepareAsyncBeginTransactionRaw(context, request, cq));
    }
    // Commits a transaction, while optionally updating documents.
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::google::firestore::v1::CommitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::CommitResponse>> AsyncCommit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::CommitResponse>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::CommitResponse>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::CommitResponse>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    // Rolls back a transaction.
    virtual ::grpc::Status Rollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    // Runs a query.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::firestore::v1::RunQueryResponse>> RunQuery(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::firestore::v1::RunQueryResponse>>(RunQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::RunQueryResponse>> AsyncRunQuery(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::RunQueryResponse>>(AsyncRunQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::RunQueryResponse>> PrepareAsyncRunQuery(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::RunQueryResponse>>(PrepareAsyncRunQueryRaw(context, request, cq));
    }
    // Streams batches of document updates and deletes, in order.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>> Write(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>>(WriteRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>> AsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>>(AsyncWriteRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>>(PrepareAsyncWriteRaw(context, cq));
    }
    // Listens to changes.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>> Listen(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>>(ListenRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>> AsyncListen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>>(AsyncListenRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>> PrepareAsyncListen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>>(PrepareAsyncListenRaw(context, cq));
    }
    // Lists all the collection IDs underneath a document.
    virtual ::grpc::Status ListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::google::firestore::v1::ListCollectionIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListCollectionIdsResponse>> AsyncListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListCollectionIdsResponse>>(AsyncListCollectionIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListCollectionIdsResponse>> PrepareAsyncListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListCollectionIdsResponse>>(PrepareAsyncListCollectionIdsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Gets a single document.
      virtual void GetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Lists documents.
      virtual void ListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDocuments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListDocumentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListDocuments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListDocumentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Creates a new document.
      virtual void CreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Updates or inserts a document.
      virtual void UpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Deletes a document.
      virtual void DeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Gets multiple documents.
      //
      // Documents returned by this method are not guaranteed to be returned in the
      // same order that they were requested.
      virtual void BatchGetDocuments(::grpc::ClientContext* context, ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::experimental::ClientReadReactor< ::google::firestore::v1::BatchGetDocumentsResponse>* reactor) = 0;
      // Starts a new transaction.
      virtual void BeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::BeginTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BeginTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::BeginTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Commits a transaction, while optionally updating documents.
      virtual void Commit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Commit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::CommitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Commit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Commit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::CommitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Rolls back a transaction.
      virtual void Rollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rollback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Rollback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Runs a query.
      virtual void RunQuery(::grpc::ClientContext* context, ::google::firestore::v1::RunQueryRequest* request, ::grpc::experimental::ClientReadReactor< ::google::firestore::v1::RunQueryResponse>* reactor) = 0;
      // Streams batches of document updates and deletes, in order.
      virtual void Write(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::firestore::v1::WriteRequest,::google::firestore::v1::WriteResponse>* reactor) = 0;
      // Listens to changes.
      virtual void Listen(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::firestore::v1::ListenRequest,::google::firestore::v1::ListenResponse>* reactor) = 0;
      // Lists all the collection IDs underneath a document.
      virtual void ListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCollectionIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListCollectionIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListCollectionIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListCollectionIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>* AsyncGetDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>* PrepareAsyncGetDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListDocumentsResponse>* AsyncListDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListDocumentsResponse>* PrepareAsyncListDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>* AsyncCreateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>* PrepareAsyncCreateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>* AsyncUpdateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::Document>* PrepareAsyncUpdateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>* BatchGetDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>* AsyncBatchGetDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::BatchGetDocumentsResponse>* PrepareAsyncBatchGetDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::BeginTransactionResponse>* AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::BeginTransactionResponse>* PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::CommitResponse>* AsyncCommitRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::CommitResponse>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::firestore::v1::RunQueryResponse>* RunQueryRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::RunQueryResponse>* AsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::firestore::v1::RunQueryResponse>* PrepareAsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* WriteRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* ListenRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* AsyncListenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* PrepareAsyncListenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListCollectionIdsResponse>* AsyncListCollectionIdsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::v1::ListCollectionIdsResponse>* PrepareAsyncListCollectionIdsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::google::firestore::v1::Document* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>> AsyncGetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>>(AsyncGetDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>> PrepareAsyncGetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>>(PrepareAsyncGetDocumentRaw(context, request, cq));
    }
    ::grpc::Status ListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::google::firestore::v1::ListDocumentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListDocumentsResponse>> AsyncListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListDocumentsResponse>>(AsyncListDocumentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListDocumentsResponse>> PrepareAsyncListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListDocumentsResponse>>(PrepareAsyncListDocumentsRaw(context, request, cq));
    }
    ::grpc::Status CreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::google::firestore::v1::Document* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>> AsyncCreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>>(AsyncCreateDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>> PrepareAsyncCreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>>(PrepareAsyncCreateDocumentRaw(context, request, cq));
    }
    ::grpc::Status UpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::google::firestore::v1::Document* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>> AsyncUpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>>(AsyncUpdateDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>> PrepareAsyncUpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>>(PrepareAsyncUpdateDocumentRaw(context, request, cq));
    }
    ::grpc::Status DeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::firestore::v1::BatchGetDocumentsResponse>> BatchGetDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::firestore::v1::BatchGetDocumentsResponse>>(BatchGetDocumentsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::BatchGetDocumentsResponse>> AsyncBatchGetDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::BatchGetDocumentsResponse>>(AsyncBatchGetDocumentsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::BatchGetDocumentsResponse>> PrepareAsyncBatchGetDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::BatchGetDocumentsResponse>>(PrepareAsyncBatchGetDocumentsRaw(context, request, cq));
    }
    ::grpc::Status BeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::google::firestore::v1::BeginTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::BeginTransactionResponse>> AsyncBeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::BeginTransactionResponse>>(AsyncBeginTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::BeginTransactionResponse>> PrepareAsyncBeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::BeginTransactionResponse>>(PrepareAsyncBeginTransactionRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::google::firestore::v1::CommitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::CommitResponse>> AsyncCommit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::CommitResponse>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::CommitResponse>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::CommitResponse>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status Rollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::firestore::v1::RunQueryResponse>> RunQuery(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::firestore::v1::RunQueryResponse>>(RunQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::RunQueryResponse>> AsyncRunQuery(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::RunQueryResponse>>(AsyncRunQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::RunQueryResponse>> PrepareAsyncRunQuery(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::firestore::v1::RunQueryResponse>>(PrepareAsyncRunQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>> Write(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>>(WriteRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>> AsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>>(AsyncWriteRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>>(PrepareAsyncWriteRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>> Listen(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>>(ListenRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>> AsyncListen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>>(AsyncListenRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>> PrepareAsyncListen(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>>(PrepareAsyncListenRaw(context, cq));
    }
    ::grpc::Status ListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::google::firestore::v1::ListCollectionIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListCollectionIdsResponse>> AsyncListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListCollectionIdsResponse>>(AsyncListCollectionIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListCollectionIdsResponse>> PrepareAsyncListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListCollectionIdsResponse>>(PrepareAsyncListCollectionIdsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) override;
      void GetDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) override;
      void GetDocument(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDocuments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListDocumentsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDocuments(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListDocuments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListDocumentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) override;
      void CreateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) override;
      void CreateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) override;
      void UpdateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, std::function<void(::grpc::Status)>) override;
      void UpdateDocument(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteDocument(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteDocument(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BatchGetDocuments(::grpc::ClientContext* context, ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::experimental::ClientReadReactor< ::google::firestore::v1::BatchGetDocumentsResponse>* reactor) override;
      void BeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::BeginTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginTransaction(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BeginTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::BeginTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Commit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response, std::function<void(::grpc::Status)>) override;
      void Commit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::CommitResponse* response, std::function<void(::grpc::Status)>) override;
      void Commit(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Commit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::CommitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Rollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Rollback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Rollback(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Rollback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RunQuery(::grpc::ClientContext* context, ::google::firestore::v1::RunQueryRequest* request, ::grpc::experimental::ClientReadReactor< ::google::firestore::v1::RunQueryResponse>* reactor) override;
      void Write(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::firestore::v1::WriteRequest,::google::firestore::v1::WriteResponse>* reactor) override;
      void Listen(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::firestore::v1::ListenRequest,::google::firestore::v1::ListenResponse>* reactor) override;
      void ListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCollectionIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListCollectionIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCollectionIds(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListCollectionIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::firestore::v1::ListCollectionIdsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>* AsyncGetDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>* PrepareAsyncGetDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListDocumentsResponse>* AsyncListDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListDocumentsResponse>* PrepareAsyncListDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListDocumentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>* AsyncCreateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>* PrepareAsyncCreateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CreateDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>* AsyncUpdateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::Document>* PrepareAsyncUpdateDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::UpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::google::firestore::v1::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::firestore::v1::BatchGetDocumentsResponse>* BatchGetDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::firestore::v1::BatchGetDocumentsResponse>* AsyncBatchGetDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::firestore::v1::BatchGetDocumentsResponse>* PrepareAsyncBatchGetDocumentsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::BeginTransactionResponse>* AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::BeginTransactionResponse>* PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::firestore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::CommitResponse>* AsyncCommitRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::CommitResponse>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::firestore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::firestore::v1::RunQueryResponse>* RunQueryRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::firestore::v1::RunQueryResponse>* AsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::firestore::v1::RunQueryResponse>* PrepareAsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::firestore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* WriteRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* ListenRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* AsyncListenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* PrepareAsyncListenRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListCollectionIdsResponse>* AsyncListCollectionIdsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::v1::ListCollectionIdsResponse>* PrepareAsyncListCollectionIdsRaw(::grpc::ClientContext* context, const ::google::firestore::v1::ListCollectionIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDocument_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDocuments_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDocument_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDocument_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDocument_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchGetDocuments_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback_;
    const ::grpc::internal::RpcMethod rpcmethod_RunQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Listen_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCollectionIds_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Gets a single document.
    virtual ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response);
    // Lists documents.
    virtual ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response);
    // Creates a new document.
    virtual ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response);
    // Updates or inserts a document.
    virtual ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response);
    // Deletes a document.
    virtual ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response);
    // Gets multiple documents.
    //
    // Documents returned by this method are not guaranteed to be returned in the
    // same order that they were requested.
    virtual ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer);
    // Starts a new transaction.
    virtual ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response);
    // Commits a transaction, while optionally updating documents.
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response);
    // Rolls back a transaction.
    virtual ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response);
    // Runs a query.
    virtual ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer);
    // Streams batches of document updates and deletes, in order.
    virtual ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream);
    // Listens to changes.
    virtual ::grpc::Status Listen(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream);
    // Lists all the collection IDs underneath a document.
    virtual ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDocument() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDocument(::grpc::ServerContext* context, ::google::firestore::v1::GetDocumentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::Document>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListDocuments() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDocuments(::grpc::ServerContext* context, ::google::firestore::v1::ListDocumentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::ListDocumentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateDocument() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDocument(::grpc::ServerContext* context, ::google::firestore::v1::CreateDocumentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::Document>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateDocument() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDocument(::grpc::ServerContext* context, ::google::firestore::v1::UpdateDocumentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::Document>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteDocument() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDocument(::grpc::ServerContext* context, ::google::firestore::v1::DeleteDocumentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchGetDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchGetDocuments() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_BatchGetDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGetDocuments(::grpc::ServerContext* context, ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerAsyncWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginTransaction(::grpc::ServerContext* context, ::google::firestore::v1::BeginTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::BeginTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::google::firestore::v1::CommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::CommitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rollback() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::google::firestore::v1::RollbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunQuery() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunQuery(::grpc::ServerContext* context, ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerAsyncWriter< ::google::firestore::v1::RunQueryResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(10, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Listen() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListen(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(11, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCollectionIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListCollectionIds() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ListCollectionIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollectionIds(::grpc::ServerContext* context, ::google::firestore::v1::ListCollectionIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::v1::ListCollectionIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDocument<WithAsyncMethod_ListDocuments<WithAsyncMethod_CreateDocument<WithAsyncMethod_UpdateDocument<WithAsyncMethod_DeleteDocument<WithAsyncMethod_BatchGetDocuments<WithAsyncMethod_BeginTransaction<WithAsyncMethod_Commit<WithAsyncMethod_Rollback<WithAsyncMethod_RunQuery<WithAsyncMethod_Write<WithAsyncMethod_Listen<WithAsyncMethod_ListCollectionIds<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDocument() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::GetDocumentRequest, ::google::firestore::v1::Document>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::GetDocumentRequest* request,
                 ::google::firestore::v1::Document* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDocument(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetDocument(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::GetDocumentRequest, ::google::firestore::v1::Document>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::GetDocumentRequest, ::google::firestore::v1::Document>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListDocuments() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::ListDocumentsRequest, ::google::firestore::v1::ListDocumentsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::ListDocumentsRequest* request,
                 ::google::firestore::v1::ListDocumentsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListDocuments(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListDocuments(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::ListDocumentsRequest, ::google::firestore::v1::ListDocumentsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::ListDocumentsRequest, ::google::firestore::v1::ListDocumentsResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateDocument() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::CreateDocumentRequest, ::google::firestore::v1::Document>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::CreateDocumentRequest* request,
                 ::google::firestore::v1::Document* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateDocument(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateDocument(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::CreateDocumentRequest, ::google::firestore::v1::Document>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::CreateDocumentRequest, ::google::firestore::v1::Document>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateDocument() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::UpdateDocumentRequest, ::google::firestore::v1::Document>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::UpdateDocumentRequest* request,
                 ::google::firestore::v1::Document* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateDocument(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateDocument(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::UpdateDocumentRequest, ::google::firestore::v1::Document>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::UpdateDocumentRequest, ::google::firestore::v1::Document>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteDocument() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::DeleteDocumentRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::DeleteDocumentRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteDocument(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteDocument(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::DeleteDocumentRequest, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::DeleteDocumentRequest, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BatchGetDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BatchGetDocuments() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::google::firestore::v1::BatchGetDocumentsRequest, ::google::firestore::v1::BatchGetDocumentsResponse>(
          [this] { return this->BatchGetDocuments(); }));
    }
    ~ExperimentalWithCallbackMethod_BatchGetDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::google::firestore::v1::BatchGetDocumentsRequest, ::google::firestore::v1::BatchGetDocumentsResponse>* BatchGetDocuments() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::google::firestore::v1::BatchGetDocumentsRequest, ::google::firestore::v1::BatchGetDocumentsResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BeginTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::BeginTransactionRequest, ::google::firestore::v1::BeginTransactionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::BeginTransactionRequest* request,
                 ::google::firestore::v1::BeginTransactionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BeginTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BeginTransaction(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::BeginTransactionRequest, ::google::firestore::v1::BeginTransactionResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::BeginTransactionRequest, ::google::firestore::v1::BeginTransactionResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Commit() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::CommitRequest, ::google::firestore::v1::CommitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::CommitRequest* request,
                 ::google::firestore::v1::CommitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Commit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Commit(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::CommitRequest, ::google::firestore::v1::CommitResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::CommitRequest, ::google::firestore::v1::CommitResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Rollback() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::RollbackRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::RollbackRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Rollback(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Rollback(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::RollbackRequest, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::RollbackRequest, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RunQuery() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::google::firestore::v1::RunQueryRequest, ::google::firestore::v1::RunQueryResponse>(
          [this] { return this->RunQuery(); }));
    }
    ~ExperimentalWithCallbackMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::google::firestore::v1::RunQueryRequest, ::google::firestore::v1::RunQueryResponse>* RunQuery() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::google::firestore::v1::RunQueryRequest, ::google::firestore::v1::RunQueryResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackBidiHandler< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>(
          [this] { return this->Write(); }));
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>* Write() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::google::firestore::v1::WriteRequest, ::google::firestore::v1::WriteResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Listen() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc_impl::internal::CallbackBidiHandler< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>(
          [this] { return this->Listen(); }));
    }
    ~ExperimentalWithCallbackMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>* Listen() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::google::firestore::v1::ListenRequest, ::google::firestore::v1::ListenResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListCollectionIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListCollectionIds() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::ListCollectionIdsRequest, ::google::firestore::v1::ListCollectionIdsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::firestore::v1::ListCollectionIdsRequest* request,
                 ::google::firestore::v1::ListCollectionIdsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListCollectionIds(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListCollectionIds(
        ::grpc::experimental::MessageAllocator< ::google::firestore::v1::ListCollectionIdsRequest, ::google::firestore::v1::ListCollectionIdsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::firestore::v1::ListCollectionIdsRequest, ::google::firestore::v1::ListCollectionIdsResponse>*>(
          ::grpc::Service::experimental().GetHandler(12))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListCollectionIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetDocument<ExperimentalWithCallbackMethod_ListDocuments<ExperimentalWithCallbackMethod_CreateDocument<ExperimentalWithCallbackMethod_UpdateDocument<ExperimentalWithCallbackMethod_DeleteDocument<ExperimentalWithCallbackMethod_BatchGetDocuments<ExperimentalWithCallbackMethod_BeginTransaction<ExperimentalWithCallbackMethod_Commit<ExperimentalWithCallbackMethod_Rollback<ExperimentalWithCallbackMethod_RunQuery<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Listen<ExperimentalWithCallbackMethod_ListCollectionIds<Service > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDocument() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListDocuments() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateDocument() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateDocument() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteDocument() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchGetDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchGetDocuments() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_BatchGetDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rollback() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunQuery() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Listen() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCollectionIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListCollectionIds() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ListCollectionIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDocument() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDocument(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListDocuments() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDocuments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateDocument() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDocument(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateDocument() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDocument(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteDocument() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDocument(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchGetDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BatchGetDocuments() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_BatchGetDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGetDocuments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Commit() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Rollback() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RunQuery() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(10, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Listen() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListen(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(11, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCollectionIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListCollectionIds() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ListCollectionIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollectionIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDocument() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDocument(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDocument(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDocuments() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListDocuments(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListDocuments(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDocument() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateDocument(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDocument(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateDocument() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateDocument(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateDocument(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteDocument() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteDocument(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteDocument(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BatchGetDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BatchGetDocuments() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->BatchGetDocuments(); }));
    }
    ~ExperimentalWithRawCallbackMethod_BatchGetDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BatchGetDocuments() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BeginTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BeginTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BeginTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Commit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Commit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Commit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Rollback() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Rollback(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Rollback(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RunQuery() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->RunQuery(); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RunQuery() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Write(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::WriteResponse, ::google::firestore::v1::WriteRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Write() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Listen() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Listen(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::firestore::v1::ListenResponse, ::google::firestore::v1::ListenRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Listen() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListCollectionIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListCollectionIds() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListCollectionIds(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListCollectionIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListCollectionIds(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDocument() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::GetDocumentRequest, ::google::firestore::v1::Document>(std::bind(&WithStreamedUnaryMethod_GetDocument<BaseClass>::StreamedGetDocument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDocument(::grpc::ServerContext* context, const ::google::firestore::v1::GetDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDocument(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::GetDocumentRequest,::google::firestore::v1::Document>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListDocuments() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::ListDocumentsRequest, ::google::firestore::v1::ListDocumentsResponse>(std::bind(&WithStreamedUnaryMethod_ListDocuments<BaseClass>::StreamedListDocuments, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::ListDocumentsRequest* request, ::google::firestore::v1::ListDocumentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDocuments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::ListDocumentsRequest,::google::firestore::v1::ListDocumentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateDocument() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::CreateDocumentRequest, ::google::firestore::v1::Document>(std::bind(&WithStreamedUnaryMethod_CreateDocument<BaseClass>::StreamedCreateDocument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::CreateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDocument(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::CreateDocumentRequest,::google::firestore::v1::Document>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateDocument() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::UpdateDocumentRequest, ::google::firestore::v1::Document>(std::bind(&WithStreamedUnaryMethod_UpdateDocument<BaseClass>::StreamedUpdateDocument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDocument(::grpc::ServerContext* context, const ::google::firestore::v1::UpdateDocumentRequest* request, ::google::firestore::v1::Document* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDocument(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::UpdateDocumentRequest,::google::firestore::v1::Document>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteDocument() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::DeleteDocumentRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteDocument<BaseClass>::StreamedDeleteDocument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDocument(::grpc::ServerContext* context, const ::google::firestore::v1::DeleteDocumentRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDocument(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::DeleteDocumentRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::BeginTransactionRequest, ::google::firestore::v1::BeginTransactionResponse>(std::bind(&WithStreamedUnaryMethod_BeginTransaction<BaseClass>::StreamedBeginTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::firestore::v1::BeginTransactionRequest* request, ::google::firestore::v1::BeginTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::BeginTransactionRequest,::google::firestore::v1::BeginTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::CommitRequest, ::google::firestore::v1::CommitResponse>(std::bind(&WithStreamedUnaryMethod_Commit<BaseClass>::StreamedCommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::firestore::v1::CommitRequest* request, ::google::firestore::v1::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::CommitRequest,::google::firestore::v1::CommitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rollback() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::RollbackRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Rollback<BaseClass>::StreamedRollback, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::firestore::v1::RollbackRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::RollbackRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCollectionIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListCollectionIds() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::v1::ListCollectionIdsRequest, ::google::firestore::v1::ListCollectionIdsResponse>(std::bind(&WithStreamedUnaryMethod_ListCollectionIds<BaseClass>::StreamedListCollectionIds, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCollectionIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCollectionIds(::grpc::ServerContext* context, const ::google::firestore::v1::ListCollectionIdsRequest* request, ::google::firestore::v1::ListCollectionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCollectionIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::v1::ListCollectionIdsRequest,::google::firestore::v1::ListCollectionIdsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDocument<WithStreamedUnaryMethod_ListDocuments<WithStreamedUnaryMethod_CreateDocument<WithStreamedUnaryMethod_UpdateDocument<WithStreamedUnaryMethod_DeleteDocument<WithStreamedUnaryMethod_BeginTransaction<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_ListCollectionIds<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_BatchGetDocuments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_BatchGetDocuments() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::google::firestore::v1::BatchGetDocumentsRequest, ::google::firestore::v1::BatchGetDocumentsResponse>(std::bind(&WithSplitStreamingMethod_BatchGetDocuments<BaseClass>::StreamedBatchGetDocuments, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_BatchGetDocuments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchGetDocuments(::grpc::ServerContext* context, const ::google::firestore::v1::BatchGetDocumentsRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::BatchGetDocumentsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedBatchGetDocuments(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::firestore::v1::BatchGetDocumentsRequest,::google::firestore::v1::BatchGetDocumentsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_RunQuery() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler< ::google::firestore::v1::RunQueryRequest, ::google::firestore::v1::RunQueryResponse>(std::bind(&WithSplitStreamingMethod_RunQuery<BaseClass>::StreamedRunQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::firestore::v1::RunQueryRequest* request, ::grpc::ServerWriter< ::google::firestore::v1::RunQueryResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRunQuery(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::firestore::v1::RunQueryRequest,::google::firestore::v1::RunQueryResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_BatchGetDocuments<WithSplitStreamingMethod_RunQuery<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDocument<WithStreamedUnaryMethod_ListDocuments<WithStreamedUnaryMethod_CreateDocument<WithStreamedUnaryMethod_UpdateDocument<WithStreamedUnaryMethod_DeleteDocument<WithSplitStreamingMethod_BatchGetDocuments<WithStreamedUnaryMethod_BeginTransaction<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<WithSplitStreamingMethod_RunQuery<WithStreamedUnaryMethod_ListCollectionIds<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace firestore
}  // namespace google


#endif  // GRPC_google_2ffirestore_2fv1_2ffirestore_2eproto__INCLUDED
